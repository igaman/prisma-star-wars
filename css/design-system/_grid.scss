@charset "UTF-8";

$dimension: (
  mobile: 0,
  tablet: 768,
  desktop: 1024,
  large: 1280
);

$tablet-breakpoint: map-get($dimension, tablet) + 0px;
$desktop-breakpoint: map-get($dimension, desktop) + 0px;
$large-breakpoint: map-get($dimension, large) + 0px;

//dimension of the gutters in pixels
$gutter-space: 16;
$gutter-space-large: 24;

.grid-container {
  overflow: hidden;
}

@mixin gridContainer() {
  display: flex;
  -webkit-box-flex: 0;
  -ms-flex: 0 1 auto;
  flex: 0 1 auto;
  -webkit-box-orient: horizontal;
  -webkit-box-direction: normal;
  -ms-flex-direction: row;
  flex-direction: row;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  box-sizing: border-box;
}

@mixin grid($cols, $sideCuts: true) {
  $maxCols: 12;
  $widthModifier: $maxCols / $cols;
  $width: (100% / $widthModifier);
  width: $width;
  box-sizing: border-box;
  flex: 0 0 auto;
}

[class^="col-"] {
  padding: 0 ($gutter-space / 2 + 0px);
  @media (min-width: $large-breakpoint) {
    padding: 0 ($gutter-space-large / 2 + 0px);
  }
  //ng for no-gutters
  &.ng {
    padding: 0;
  }
}

//delete gutter for first and last child
.row {
  margin-right: -($gutter-space / 2 + 0px) ;
  margin-left: -($gutter-space / 2 + 0px) ;

  @media (min-width: $large-breakpoint) {
    margin-right: -($gutter-space-large / 2 + 0px) ;
    margin-left: -($gutter-space-large / 2 + 0px) ;
  }

  @include gridContainer;

  &.no-gutters {
    margin-right: 0;
    margin-left: 0;
    & > [class^="col-"] {
      padding-left: 0;
      padding-right: 0;
    }
  }
}

@for $i from 1 through 12 {
  .col-#{$i} {
    @include grid($i);
  }
}

@for $i from 1 through 12 {
  .col-#{$i}-tab {
    @media (min-width: $tablet-breakpoint) {
      @include grid($i);
    }
  }
}

@for $i from 1 through 12 {
  .col-#{$i}-desk {
    @media (min-width: $desktop-breakpoint) {
      @include grid($i);
    }
  }
}

@for $i from 1 through 12 {
  .col-#{$i}-xl {
    @media (min-width: $large-breakpoint) {
      @include grid($i);
    }
  }
}
